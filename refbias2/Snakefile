#######################################################################################################
## Apply reference bias correction and benchmark BaseQTL with other methods, continuation from refbias 
#######################################################################################################

shell.prefix("source ~/.bashrc; ")

configfile: "config.yaml"

localrules: all

import pandas as pd
import os

from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
FTP = FTPRemoteProvider()

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()



subworkflow InputPrep:
    workdir: "/home/ev250/Bayesian_inf/trecase/Scripts/stan_eff/real_data/psoriasis"

subworkflow GeuRefbias:
    workdir: "/home/ev250/Bayesian_inf/trecase/Scripts/stan_eff/real_data/refbias"


# get home directories for Snakefiles in subdirectories to call Scripts/Functions etc avoiding duplication
home_InputPrep = vars(vars(workflow)['_subworkflows']['InputPrep'])['_workdir']
home_GeuRefbias = vars(vars(workflow)['_subworkflows']['GeuRefbias'])['_workdir']

## Function from GeuRefbias

def samples():
    """ Get samples to use common to DNA and RNA, file prepared in /home/ev250/Bayesian_inf/trecase/Scripts/stan_eff/real_data/RNA.genotyping.QC.R. Each line contains the name of a sample
    """
    f = open(config['samples'], "r")
    samp=[]
    for line in f:
        samp.append(line.strip().split()[0])
    return samp

def genes():
    """ Get genes to run in model from  previous summary for RNA to avoid running genes with not enough information"""
    data=pd.read_csv(config['stan'], sep=" ")
    return list(set(data['Gene_id']))

def genes_GT():
    """ Get genes in chomosome 22 after filering counts to run in GT model"""
    df1=pd.read_csv(config['geneInfo'], sep=" ")
    df1=df1[df1.chr == '22']
    df2=pd.read_csv(config['counts'], sep=" ")
    genes=df1.merge(df2.gene_id, on="gene_id")
    return list(set(genes['gene_id']))


rule all:
    input:
        # expand(config['out'] + "/inputs/fSNP/chr{chrom}.fSNP.GT.txt", chrom=[22]),
        # expand(config["out"] + "/pre_remap/{sample}.chrom{chrom}.MapUnique.initial.AI.txt",
        #        sample=samples(),
        #        chrom=[22]),
        # expand(config["out"] + "/post_remap/{sample}/Aligned.sortedByCoord.out.post_remapping_AI.txt", sample=samples()),
        # "Scripts/QC.pdf",
        #expand( config['out'] + "/Btrecase/SpikeMixV3_2/GT/rbias.{gene}.stan.summary.txt", gene=genes_GT())
        # expand(config['geu_dir'] + "/ASE/DNA/chr{chrom}.ASE.{size}.samples.vcf.gz",chrom=[22], size=[25])
        #expand(config['out'] + "/Btrecase/SpikeMixV3_2/GT{size}/rbias.{gene}.stan.summary.txt", size=[25],gene=genes_GT())
        "Scripts/external.validity.pdf"


rule fSNP_coord:
    """Redefine fSNPs, use fSNPs within GT vcf with at least 1 het individual. Get fSNP coordinates per gene. Use ebg to select fSNPs and then gt to extract those fSNPs with at least one het"""
    input:
        ebg=config['ebg'],
        gt=config['deseq2in'] + "/chr22.GT.geuvardis.rds",
    params:
        het=1
    output:
        fsnps=config['out'] + "/inputs/fSNP/chr{chrom}.fSNP.GT.txt"
    script:
        "Scripts/fSNP_GT.R"


rule prepare_remap:
    """Prepares files for remapping and for computing number of reads matching each SNP plus AI. Initial AI should be 0.5. For each read overlapping SNPs a new read is generated by swapping alleles. Both new and old reads are saved in a fastq file(s), depending on being paired or single reads, for remapping"""
    input:
        bam= GeuRefbias(config['out_rb']) + "/inputs/bam/{sample}.chrom{chrom}.MapUnique.bam",
        fsnps=config['out'] + "/inputs/fSNP/chr{chrom}.fSNP.GT.txt"
    output:
        # fastq1=config["out"] + "/pre_remap/{sample}.chrom{chrom}.MapUnique.remap.fq1.gz",
        # fastq2=config["out"] + "/pre_remap/{sample}.chrom{chrom}.MapUnique.remap.fq2.gz",
        pre_AI=config["out"] + "/pre_remap/{sample}.chrom{chrom}.MapUnique.initial.AI.txt"
    params:
        snp_dir=config['out'] + "/inputs/fSNP",
        basq=10
    log:
        "logs/pre_remap/{sample}.chrom{chrom}.log"
    shell:
        "python {config[refbias_dir]}/intersecting_snps.py "
        " --is_paired_end --is_sorted "
        " --base_qual {params.basq} "
        " --output_dir {config[out]}/pre_remap "
        " --snp_dir {params.snp_dir} "
        " {input.bam} "


rule map_star2_paired_end:
    """map reads a second time using STAR and index"""
    input:
        fastq1=expand(config["out"] + "/pre_remap/{{sample}}.chrom{chrom}.MapUnique.remap.fq1.gz", chrom=[22]),
        fastq2=expand(config["out"] + "/pre_remap/{{sample}}.chrom{chrom}.MapUnique.remap.fq2.gz", chrom=[22])
    output:
        config["out"] + "/STAR2/{sample}/Aligned.sortedByCoord.out.bam",
        config["out"] + "/STAR2/{sample}/Aligned.sortedByCoord.out.bam.bai"
    threads: 16
    params:
        index=config['indices'],
        read="zcat",
        out_dir=config["out"] + "/STAR2/{sample}/"
    shell:
        "{config[STAR]} "
        " --runThreadN {threads} "
        " --genomeDir {params.index} "
        " --readFilesIn {input.fastq1} {input.fastq2} "
        " --readFilesCommand {params.read} "
        " --outSAMtype BAM SortedByCoordinate "
        " --outFileNamePrefix {params.out_dir} "
        " --outStd Log "
        " {log} ;"
        "samtools index {output[0]} "
       

rule AI_post_remapping:
    """ Get AI post remapping for each sample """
    input:
        bam=config["out"] + "/STAR2/{sample}/Aligned.sortedByCoord.out.bam",
        fsnps=expand(config['out'] + "/inputs/fSNP/chr{chrom}.fSNP.GT.txt", chrom=['22'])
    output:
        AI=config["out"] + "/post_remap/{sample}/Aligned.sortedByCoord.out.post_remapping_AI.txt"
    params:
        snp_dir=config['out'] + "/inputs/fSNP",
        output_dir=config['out'] + "/post_remap/{sample}"
    shell:
        "python {config[refbias_dir]}/intersecting_snps_post_remap.py "
        " --is_paired_end --is_sorted "
        " --output_dir {params.output_dir} "
        " --snp_dir {params.snp_dir} "
        " {input.bam} "
        
rule get_AI: 
    """Calculates AI for each SNP across all samples. Includes binomial test  whether to keep AI estimates over 0.5"""
    input:
        pre=expand(config["out"] + "/pre_remap/{sample}.chrom{chrom}.MapUnique.initial.AI.txt",
                   sample=samples(), chrom=[22]),
        post=expand(config["out"] + "/post_remap/{sample}/Aligned.sortedByCoord.out.post_remapping_AI.txt", sample=samples() )
    output:
        AI=config["out"] + "/post_remap/pre_post_AI.txt"
    shell:
        "python {config[refbias_dir]}/AI.py "
        " --initial-AI {input.pre} "
        " --post-remap_AI {input.post} "
        " --output_file {output.AI} "

rule QC:
    """ AI QC. Using stan summary produced in /home/ev250/Bayesian_inf/trecase/Scripts/out.chr22.lm.GT.noGT.rna.v3.R"""
    input:
        AI=config["out"] + "/post_remap/pre_post_AI.txt",
        sample=config["out"] + "/post_remap/HG00096/Aligned.sortedByCoord.out.post_remapping_AI.txt",
        stan=config['stan'],
        script="Scripts/QC.R"
    output:
        "Scripts/QC.pdf"
    script:
        home_GeuRefbias +"/Scripts/RenderReport.R"
        #"Scripts/QC.R"


rule run_baseqtl_gc_GT:
    """Run GT associations with  refBias correction using complete set of AI imbalance estimates. Prior is a mix of 2 gaussians:version 3. Use library size corrected for GC content as covariate, prepared for rasqual. It is a matrix with rows genes and cols samples, independent of cis-window."""
    input:
        counts=config['counts'],
        libsize=GeuRefbias(config['out_rb']) + "/rasqual/inputs/correctedCis10_5/covariates.rasqual_gc.rds",
        eSNPs=config['fSNPs'],
        ueSNPS= expand(GeuRefbias(config['out_rb']) + "/Btrecase/inputs/fSNP/chr{chrom}.fSNP.unique.genes.txt", chrom=[22]),
        genecoord=config['geneInfo'],
        vcf=expand(config['geu_dir'] + "/ASE/DNA/chr{chrom}.ASE.allsamples.vcf.gz", chrom=[22]),
        leRef=config['legend22'],        
        hapRef=config['hap22'],
        trecmodel=config['trec_mixAny'],
        smodel=config['StanGTMixAny'],
        AI=config["out"] + "/post_remap/pre_post_AI.txt"
    params:
        chrom=22,
        snps=5*10**5,
        pop="EUR",
        tag=0.9,
        model="both",
        pretotalReads=100,
        prefix= "rbias.{gene}",
        out=config['out'] + "/Btrecase/SpikeMixV3_2/GT",
        prior=[0,0, 0.0309, 0.3479, 0.97359164, 0.02640836]  # mean, sd and mixing proportion
    threads: 
        32 ## high mem only
    output:
        config['out'] + "/Btrecase/SpikeMixV3_2/GT/rbias.{gene}.stan.summary.txt"
    script:
        "Scripts/run_BaseQTL.GT.R"


rule QC_AI2:
    """Compare stan output from run with old and new AI estimates. Check if trecase model is run in both when appropiate"""
    input:
        oldAI=GeuRefbias(config["out_rb"]) + "/post_remap/pre_post_AI.txt",
        newAI=config["out"] + "/post_remap/pre_post_AI.txt",
        geu_chris=config["sig-GEU"],
        script="Scripts/AI.stan.R"
    params:
        old_dir=GeuRefbias(config['out_rb']) + "/Btrecase/SpikeMixV3_2/GT",
        new_dir=config['out'] + "/Btrecase/SpikeMixV3_2/GT"
    output:
        "Scripts/AI.stan.pdf"
    script:
         home_GeuRefbias +"/Scripts/RenderReport.R"
         #"Scripts/AI.stan.R"




## run 25 individuals as in lm and rasqual

rule imp_small_sample_size_vcf:
    """Work with rasqual vcf for both lm and rasqual."""
    input:
        vcf=config['geu_dir'] + "/ASE/DNA/chr{chrom}.ASE.allsamples.vcf.gz",
        samples=config['out_rb'] + "/inputs/sample5_25/samples.{size}inds.txt" 
    output:
        vcf=config['geu_dir'] + "/ASE/DNA/chr{chrom}.ASE.{size}.samples.vcf.gz",
        #idx=config['geu_dir'] + "/ASE/DNA/chr{chrom}.ASE.{size}.samples.vcf.gz.tbi",
    shell:
        "bcftools view -S {input.samples} -Oz -o {output.vcf} {input.vcf} ; "
        "bcftools index -t {output.vcf} ; "        


rule run_baseqtl_25_GT:
    """Run GT associations for 25 ind. with refBias correction using complete set of AI imbalance estimates. Prior is a mix of 2 gaussians:version 3. Use library size corrected for GC content as covariate, prepared for rasqual. It is a matrix with rows genes and cols samples, independent of cis-window."""
    input:
        counts=GeuRefbias(config['out_rb']) + "/inputs/sample5_25/b37_filtered.raw_counts.{size}inds.txt",
        libsize=GeuRefbias(config['out_rb']) + "/rasqual/inputs/Inds{size}.Cis10_5/covariates.rasqual_gc.rds",
        eSNPs=config['fSNPs'],
        ueSNPS= expand(GeuRefbias(config['out_rb']) + "/Btrecase/inputs/fSNP/chr{chrom}.fSNP.unique.genes.txt", chrom=[22]),
        genecoord=config['geneInfo'],
        vcf=expand(config['geu_dir'] + "/ASE/DNA/chr{chrom}.ASE.{{size}}.samples.vcf.gz", chrom=[22]),
        leRef=config['legend22'],        
        hapRef=config['hap22'],
        trecmodel=config['trec_mixAny'],
        smodel=config['StanGTMixAny'],
        AI=config["out"] + "/post_remap/pre_post_AI.txt",
        tags2run=config['deseq2in'] + "/BTrecBTrecASE.txt"
    params:
        chrom=22,
        pop="EUR",
        tag='no',
        model="both",
        pretotalReads=100,
        prefix= "rbias.{gene}",
        nhets=1,
        minasehet=2,
        out=config['out'] + "/Btrecase/SpikeMixV3_2/GT{size}",
        prior=[0,0, 0.0309, 0.3479, 0.97359164, 0.02640836]  # mean, sd and mixing proportion
    threads: 
        16 ## 32 high mem only
    output:
        config['out'] + "/Btrecase/SpikeMixV3_2/GT{size}/rbias.{gene}.stan.summary.txt"
    script:
        "Scripts/run_BaseQTL.GT.R"
       

rule external_validity2:
    """Assess external validity/benchmarking of different models, similar to rule exernal validity from refbias but with updated files"""
    input:
        script="Scripts/external.validity.R",
        #geneStEnd=InputPrep(config['geneStEnd']),
        dseq=expand(config['deseq2in'] + "/{model}/{model}batch{N}_chr22.nbmodelRes.csv", model=["RunNBmodelshrinkage"], N=[x+1 for x in range(10)]), ## 86 inds, internal normalization
        geu_chris=config["sig-GEU"],
        geu_egenes=config["geu_arrayX"] + "/EUR373.gene.cis.FDR5.best.rs137.txt.gz",
        rasqual_header=GeuRefbias(config['out_rb']) + "/rasqual/output/rasqual.header.txt"
    params:
        btrecase=expand(config['out'] + "/Btrecase/SpikeMixV3_2/{source}", source=["GT", "GT25"]), ## 86 and 25 inds, lib size not adjusted by gc content,
        #btrecase25=expand(config['out'] + "/Btrecase/SpikeMixV3_2/GT{size}",size=[25]),
        lm_86=expand(GeuRefbias(config['out_rb']) + "/lm/{cond}", cond=["Inds86_gclibsize" ]), ## 86 samples by gc content lib size adjustment
        lm_size=expand(GeuRefbias(config['out_rb']) + "/lm/Inds{size}", size=[5,25]), ## lib size adjusted by gc content
        rasqual_per=GeuRefbias(config['out_rb']) + "/rasqual/outASE_per/cis1_10_5", ## rasqual smaller cis-window, 86 inds, permutation pvalue
        rasqual_86=GeuRefbias(config['out_rb']) + "/rasqual/outASE/cis1_10_5",
        rasqual_size=expand(GeuRefbias(config['out_rb']) + "/rasqual/out{size}ase/cis1_10_5", size=[5,25]),
        rbias=["rbias"],
    output:
        out="Scripts/external.validity.pdf"
    script:
        home_GeuRefbias + "/Scripts/RenderReport.R"
        #"Scripts/external.validity.R"
        
## snakemake  -k -j 500 --cluster-config cpu.json --cluster "sbatch -A {cluster.account} -p {cluster.partition}  -c {cluster.cpus-per-task}   -t {cluster.time} --output {cluster.error} -J {cluster.job} "

## snakemake  -k -j 500 --cluster-config himem.json --cluster "sbatch -A {cluster.account} -p {cluster.partition}  -c {cluster.cpus-per-task}   -t {cluster.time} --output {cluster.error} -J {cluster.job} "

## ENSG00000100364 ENSG00000188636 ENSG00000100422   for himem
